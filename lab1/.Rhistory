t.test(x=x[,i],y=y,paired = TRUE)$p.value-a
x <- data[,colnames(train)!="Conference"]
y <- data[,colnames(train)=="Conference"]
j=1:ncol(x)
pvalues <- sapply(j,FUN=function(i){
pvalue <- t.test(x=x[,i],y=y,paired = TRUE)$p.value
pvalue
})
idx <- order(pvalues)
pvalues <- as.data.frame(pvalues[idx])
pvalues$index <- idx
pvalues$required <- pvalues$`pvalues[idx]`<a*idx/ncol(x)
a <- 0.05
pvalues$required <- pvalues$`pvalues[idx]`<a*idx/ncol(x)
head(rej)
pvalues$required==TRUE
pvalues[pvalues$required==TRUE,]
rej <- pvalues[pvalues$required==TRUE,]$index
colnames(x)[rownames(rej)]
colnames(x)[rej]
x <- data[,colnames(train)!="Conference"]
y <- data[,colnames(train)=="Conference"]
j=1:ncol(x)
pvalues <- sapply(j,FUN=function(i){
pvalue <- t.test(x=x[,i],y=y,paired = TRUE)$p.value
pvalue
})
idx <- order(pvalues)
pvalues <- as.data.frame(pvalues[idx])
pvalues$index <- idx
a <- 0.05
pvalues$required <- pvalues$`pvalues[idx]`<a*rownames(pvalues)/ncol(x)
pvalues <- as.data.frame(pvalues[idx])
pvalues$index <- idx
a <- 0.05
#2.3###########################################################################
x <- data[,colnames(train)!="Conference"]
y <- data[,colnames(train)=="Conference"]
j=1:ncol(x)
pvalues <- sapply(j,FUN=function(i){
pvalue <- t.test(x=x[,i],y=y,paired = TRUE)$p.value
pvalue
})
idx <- order(pvalues)
pvalues <- as.data.frame(pvalues[idx])
pvalues$index <- idx
a <- 0.05
pvalues$required <- pvalues$`pvalues[idx]`<a*rownames(pvalues)/ncol(x)
rownames(pvalues)
as.numeric(rownames(pvalues))
pvalues$required <- pvalues$`pvalues[idx]`< a*as.numeric(rownames(pvalues))/ncol(x)
L <- max(rownames(pvalues[pvalues$required==TRUE,]))
a <- 0.05
pvalues$required <- pvalues$`pvalues[idx]`< a*as.numeric(rownames(pvalues))/ncol(x)
L <- max(rownames(pvalues[pvalues$required==TRUE,]))
rej <- pvalues[1:L,]$index
colnames(x)[rej]
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
colnames(x)[rej]
rej_f <- colnames(x)[rej]
aa<- pamr.listgenes(model,mydata,threshold = df[1,2],genenames = TRUE)
class(aa)
aa<- pamr.listgenes(model,mydata,threshold = df[1,2],genenames = TRUE)[,2]
aa
grep(aa,rej_f)
length(aa)
length(rej_f)
vib1<- pamr.listgenes(model,mydata,threshold = df[1,2],genenames = TRUE)[,2]
vib2 <- coef(mdl221,s=mdl221$lambda.1se)@x
length(vib2)  # 12
vib3 <- coef(mdl222)[[1]]
length(vib3) # 43
grep(vib1,rej_f)
grep(vib2,rej_f)
grep(vib3,rej_f)
grep(vib1[1:10],rej_f)
vib1[1:10]
grep(vib1[1:10],rej_f)
a<-vib1[1:10]
grep(a,rej_f)
rej_f
rej_f[25]
which(rej_f=="papers")
grep("papers",rej_f)
c<-colnames(x)
c
c=="papers"
which(c=="papers")
which(c==rej_f[25])
rej_f[25]
x <- data[,colnames(train)!="Conference"]
y <- data[,colnames(train)=="Conference"]
j=1:ncol(x)
pvalues <- sapply(j,FUN=function(i){
pvalue <- t.test(x[,i]~y,data = data, alternative = "two.sided")$p.value
pvalue
})
idx <- order(pvalues)
idx <- order(pvalues)
idx
pvalues <- as.data.frame(pvalues[idx])
pvalues$index <- idx
a <- 0.05
pvalues$required <- pvalues$`pvalues[idx]`< a*as.numeric(rownames(pvalues))/ncol(x)
L <- max(rownames(pvalues[pvalues$required==TRUE,]))
rej <- pvalues[1:L,]$index
rej_f <- colnames(x)[rej]
rej_f
vib2
vib3
coef(mdl222)[[1]]
mdl222
#2.1###########################################################################
# Sys.setlocale(locale = "English")
set.seed(12345)
data <- read.csv("data.csv",sep = ";")
idx <- sample(nrow(data),floor(nrow(data)*0.7))
train <- data[idx,]
test <- data[-idx,]
library(pamr)
rownames(data)=1:nrow(data)
xtrain=t(train[,colnames(train)!="Conference"])
ytrain=train[,"Conference"]
mydata=list(x=xtrain,y=as.factor(ytrain),
geneid=as.character(1:nrow(xtrain)),
genenames=rownames(xtrain))
model=pamr.train(mydata)
cvmodel <- pamr.cv(model, mydata)
df <- as.matrix(data.frame(error=cvmodel$error,th=cvmodel$threshold))
df <- df[order(df[,1]),]
pamr.plotcen(model, mydata, threshold=df[1,2])
vib1<- pamr.listgenes(model,mydata,threshold = df[1,2],genenames = TRUE)[,2]
# 231
#2.2###########################################################################
library(glmnet)
set.seed(12345)
mdl221 <- cv.glmnet(t(xtrain),as.factor(ytrain),family="binomial",alpha=0.5)
p221 <- predict(mdl221,t(xtest),type="class",s="lambda.1se")
mean(p221!=ytest)   # 0.15
p221 <- predict(mdl221,t(xtrain),type="class",s="lambda.1se")
mdl221 <- cv.glmnet(t(xtrain),as.factor(ytrain),family="binomial",alpha=0.5)
p221 <- predict(mdl221,t(xtest),type="class",s="lambda.1se")
mean(p221!=ytest)   # 0.15
xtest=t(test[,colnames(test)!="Conference"])
ypred <- pamr.predict(model,xtest,threshold = df[1,2],type = "class")
ytest=as.factor(test[,"Conference"])
mean(ytest!=ypred) #0.1
ypred <- pamr.predict(model,xtrain,threshold = df[1,2],type = "class")
mean(ytrain!=ypred) #0.09
#2.2###########################################################################
library(glmnet)
set.seed(12345)
mdl221 <- cv.glmnet(t(xtrain),as.factor(ytrain),family="binomial",alpha=0.5)
p221 <- predict(mdl221,t(xtest),type="class",s="lambda.1se")
mean(p221!=ytest)   # 0.15
p221 <- predict(mdl221,t(xtrain),type="class",s="lambda.1se")
mean(p221!=ytrain)   # 0.1136364
vib2 <- coef(mdl221,s=mdl221$lambda.1se)@x
coef(mdl221,s=mdl221$lambda.1se)
class(coef(mdl221,s=mdl221$lambda.1se))
coef(mdl221,s=mdl221$lambda.1se)[,1]
rownames(coef(mdl221,s=mdl221$lambda.1se))
vib2 <- rownames(coef(mdl221,s=mdl221$lambda.1se))
length(vib2)  # 12
vib2 <- coef(mdl221,s=mdl221$lambda.1se)@rownames
vib2 <- coef(mdl221,s=mdl221$lambda.1se)@x
length(vib2)  # 12
coef(mdl221,s=mdl221$lambda.1se)[,1]!=0
coef <- coef(mdl221,s=mdl221$lambda.1se)
vib2 <- rownames(coef[coef[,1]!=0,])
vib2
coef[,1]!=0
coef[coef[,1]!=0,]
vib2 <- colnames(coef[coef[,1]!=0,])
class(coef)
View(coef)
coef <- as.matrix(coef(mdl221,s=mdl221$lambda.1se))
View(coef)
vib2 <- colnames(coef[coef[,1]!=0,])
vib2 <- rownames(coef[coef[,1]!=0,])
vib2
vib2 <- rownames(coef[which(coef[,1]!=0).])
vib2 <- rownames(coef[which(coef[,1]!=0),])
coef[,1]!=0
coef[coef[,1]!=0
,]
a<-coef[coef[,1]!=0,]
colnames(a)
names(a)
vib2 <- names(coef[coef[,1]!=0,])
vib2 <- names(coef[coef[,1]!=0,]); vib2 <- vib2[-1]
vib2
length(vib2)  # 12
library(kernlab)
mdl222 <- ksvm(x=t(xtrain),y=as.factor(ytrain),kernel="vanilladot")
p222 <- predict(mdl222,t(xtest))
mean(p222!=ytest)  # 0.05
p222 <- predict(mdl222,t(xtrain))
mean(p222!=ytrain)  # 0.05
coef <- as.matrix(coef(mdl222))
vib3 <- names(coef[coef[,1]!=0,])
coef
coef(mdl222)
summary(mdl222)
mdl222
vib3 <- coef(mdl222)[[1]]
length(vib3) # 43
#2.3###########################################################################
x <- data[,colnames(train)!="Conference"]
y <- data[,colnames(train)=="Conference"]
j=1:ncol(x)
pvalues <- sapply(j,FUN=function(i){
pvalue <- t.test(x[,i]~Conference,data = data,
alternative = "two.sided")$p.value
pvalue
})
idx <- order(pvalues)
pvalues <- as.data.frame(pvalues[idx])
pvalues$index <- idx
a <- 0.01
pvalues$required <- pvalues[,1]< a*as.numeric(rownames(pvalues))/ncol(x)
L <- max(rownames(pvalues[pvalues$required==TRUE,]))
rej <- pvalues[1:L,]$index
rej_f <- colnames(x)[rej]
vib2 <- names(coef[coef[,1]!=0,])
coef <- as.matrix(coef(mdl221,s=mdl221$lambda.1se))
vib2 <- names(coef[coef[,1]!=0,]
vib2
coef <- as.matrix(coef(mdl221,s=mdl221$lambda.1se))
vib2 <- names(coef[coef[,1]!=0,])
vib2
rej_f
rej_f
a <- 0.05
pvalues$required <- pvalues[,1]< a*as.numeric(rownames(pvalues))/ncol(x)
L <- max(rownames(pvalues[pvalues$required==TRUE,]))
rej <- pvalues[1:L,]$index
rej_f <- colnames(x)[rej]
rej_f
#1.1###########################################################################
set.seed(12345)
data <- readxl::read_xlsx("influenza.xlsx")
dt1 <- reshape2::melt(data[,3:5], id="Time")
library(ggplot2)
ggplot(data=dt1,aes(x=Time,y=value, color=variable))+
geom_line()+
labs(title="Influenza and Mortality")
# It seems the mortality have a positively correlation with influenza.
#1.2###########################################################################
library(mgcv)
mdl12 <- gam(Mortality~
s(Week,k=length(unique(data$Week)))+Year,
method="GCV.Cp", data=data)
mdl12$sp
mdl12
summary(mdl12)
Sys.setlocale(locale = "English")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
#read data
df<-read.csv2("data.csv",sep=";")
#make Conference a factor
df$Conference<-as.factor(df$Conference)
set.seed(12345)
#split data to train and test
ind<-sample(nrow(df),floor(0.7*nrow(df)))
dftrain<-df[ind,]
dftest<-df[-ind,]
install.packages("pamr")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE,out.height = "220px")
Sys.setlocale(locale = "English")
df<-read.csv2("data.csv",sep=";")
#make Conference a factor
df$Conference<-as.factor(df$Conference)
set.seed(12345)
#split data to train and test
ind<-sample(nrow(df),floor(0.7*nrow(df)))
dftrain<-df[ind,]
dftest<-df[-ind,]
library(pamr)
#get the class
y<-as.factor(dftrain$Conference)
#make a list of data for centroid model
list_df=list(x=x,y=y,
geneid=as.character(1:nrow(x)), genenames=rownames(x))
get the features
library(pamr)
#get the features
x<-t(dftrain[,-which(names(dftrain) == "Conference")])
#get the class
y<-as.factor(dftrain$Conference)
#make a list of data for centroid model
list_df=list(x=x,y=y,
geneid=as.character(1:nrow(x)), genenames=rownames(x))
#fit model
par.model=pamr.train(list_df)
#cross validation
cvmodel=pamr.cv(par.model,list_df)
#find threshold
thres=cvmodel$threshold[which(cvmodel$error==min(cvmodel$error))]
#plot centroids
pamr.plotcen(par.model, list_df, threshold=thres)
#make a matrix with the cetroids
mat_genes<-invisible(pamr.listgenes(par.model,list_df,threshold=thres,genenames=T))
#make a matrix with the cetroids
mat_genes<-invisible(pamr.listgenes(par.model,list_df,threshold=thres,genenames=T))
#number of parameters selected
num_centr<-nrow(mat_genes)
cat("The number of parametrs selected are: ",num_centr)
t<-sapply(df[,-which(names(df)=="Conference")],
function(x){ t.test(x[df$Conference==1],x[df$Conference==0])[["p.value"]]})
t<-sapply(df[,-which(names(df)=="Conference")],
function(x){ t.test(x[df$Conference==1],x[df$Conference==0])[["p.value"]]})
benj<-function(p_values,alpha=0.05){
p_values<-sort(p_values)
indexes<-c(1:length(p_values))
L<-p_values-((alpha*indexes)/length(p_values))
best_p<-max(L[which(L<0)])
cutoff<-p_values[L==best_p]
rejected_values<-p_values[p_values<=cutoff]
list(cutoff,rejected_values)
}
rej<-as.data.frame(benj(t)[[2]])
rej
print(rownames(rej))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE,out.height = "220px")
library(mgcv)
mdl12 <- gam(Mortality~
s(Week,k=length(unique(data$Week)))+Year,
method="GCV.Cp", data=data)
mdl12 <- gam(Mortality~
s(Week,k=length(unique(data$Week)))+Year,
method="GCV.Cp", data=data)
data
install.packages("pamr")
#1.1###########################################################################
set.seed(12345)
data <- readxl::read_xlsx("influenza.xlsx")
dt1 <- reshape2::melt(data[,3:5], id="Time")
library(ggplot2)
ggplot(data=dt1,aes(x=Time,y=value, color=variable))+
geom_line()+
labs(title="Influenza and Mortality")
#1.2###########################################################################
library(mgcv)
mdl12 <- gam(Mortality~
s(Week,k=length(unique(data$Week)))+Year,
method="GCV.Cp", data=data)
mdl12$sp
summary(mdl12)
?gam
#1.3###########################################################################
p_Mortality <- fitted(mdl12)
dt3 <- reshape2::melt(cbind(data[,3:4],p_Mortality), id="Time")
ggplot(data=dt3,aes(x=Time,y=value, color=variable))+
geom_line()+
labs(title="Real and predicted Mortality")
cor(x=p_Mortality,y=data[,4])
plot(mdl12,main = "spline component") #  spline component
plot(mdl12,residuals = TRUE)    # smoothing residuals
plot.gam()
?plot.gam
?gam
summary(mdl12)
mdl141 <- gam(Mortality~Year+
s(Week,k=length(unique(data$Week)),sp=0.0001),
method="GCV.Cp", data=data)
p_Mortality <- fitted(mdl141)
dt3 <- reshape2::melt(cbind(data[,3:4],p_Mortality), id="Time")
p141 <- ggplot(data=dt3,aes(x=Time,y=value, color=variable))+
geom_line()+
labs(title="sp=0.0001")
mdl142 <- gam(Mortality~Year+
s(Week,k=length(unique(data$Week)),sp=10000),
method="GCV.Cp", data=data)
p_Mortality <- fitted(mdl142)
dt3 <- reshape2::melt(cbind(data[,3:4],p_Mortality), id="Time")
p142 <- ggplot(data=dt3,aes(x=Time,y=value, color=variable))+
geom_line()+
labs(title="sp=10000")
plot(gridExtra::arrangeGrob(p141,p142))
plot(mdl12,main = "spline component") #  spline component
mdl12
summary(mdl12)
mdl141$deviance
mdl142$deviance
#1.5###########################################################################
dt5 <- data.frame(Time=data$Time,residuals=mdl12$residuals,
Influenza=data$Influenza)
dt5 <- reshape2::melt(dt5, id="Time")
ggplot(data=dt5,aes(x=Time,y=value, color=variable))+
geom_line()
#1.5###########################################################################
dt5 <- data.frame(Time=data$Time,residuals=mdl12$residuals,
Influenza=data$Influenza)
dt5 <- reshape2::melt(dt5, id="Time")
ggplot(data=dt5,aes(x=Time,y=value, color=variable))+
geom_line()
(data$Influenza)
unique(data$Influenza)
mdl141$deviance
mdl142$deviance
data.frame(df0.0001=mdl141$edf,df10000=mdl142$edf)
51*7
length(unique(data$Week))
plot(mdl141$edf)
data$Week
#2.1###########################################################################
# Sys.setlocale(locale = "English")
set.seed(12345)
data <- read.csv("data.csv",sep = ";")
idx <- sample(nrow(data),floor(nrow(data)*0.7))
train <- data[idx,]
test <- data[-idx,]
library(pamr)
rownames(data)=1:nrow(data)
xtrain=t(train[,colnames(train)!="Conference"])
ytrain=train[,"Conference"]
mydata=list(x=xtrain,y=as.factor(ytrain),
geneid=as.character(1:nrow(xtrain)),
genenames=rownames(xtrain))
model=pamr.train(mydata)
cvmodel <- pamr.cv(model, mydata)
cvmodel
df <- as.matrix(data.frame(error=cvmodel$error,th=cvmodel$threshold))
df <- df[order(df[,1]),]
pamr.plotcen(model, mydata, threshold=df[1,2])
vib1<- pamr.listgenes(model,mydata,threshold = df[1,2],genenames = TRUE)[,2]
vib1[1:10,]
vib1[1:10,]
vib1
t.text
plot(mdl12,main = "spline component") #  spline component
plot(mdl12,residuals = TRUE)    # smoothing residuals
plot(mdl12$residuals)
?plot.gam()
library(mgcv)
set.seed(0)
## fake some data...
f1 <- function(x) {exp(2 * x)}
f2 <- function(x) {
0.2*x^11*(10*(1-x))^6+10*(10*x)^3*(1-x)^10
}
f3 <- function(x) {x*0}
n<-200
sig2<-4
x0 <- rep(1:4,50)
x1 <- runif(n, 0, 1)
x2 <- runif(n, 0, 1)
x3 <- runif(n, 0, 1)
e <- rnorm(n, 0, sqrt(sig2))
y <- 2*x0 + f1(x1) + f2(x2) + f3(x3) + e
x0 <- factor(x0)
b<-gam(y~x0+s(x1)+s(x2)+s(x3))
plot(b,pages=1,residuals=TRUE,all.terms=TRUE,shade=TRUE,shade.col=2)
plot(b,pages=1,seWithMean=TRUE) ## better coverage intervals
plot(mdl12,main = "spline component") #  spline component
plot(mdl12,residuals = TRUE)    # smoothing residuals
#u1
data=read.csv2("Influenza.csv")
attach(data)
plot(Time, Mortality, type="l", col="blue", ylim=c(0,2600))
points(Time, Influenza, type="l", col="red")
library(mgcv)
#GAM model
mA=gam(Mortality~Year+s(Week, k=52), data=data)
plot(Time, Mortality, type="l", col="blue")
points(Time, predict(mA), type="l", col="red")
#1.1###########################################################################
set.seed(12345)
data <- readxl::read_xlsx("influenza.xlsx")
dt1 <- reshape2::melt(data[,3:5], id="Time")
library(ggplot2)
ggplot(data=dt1,aes(x=Time,y=value, color=variable))+
geom_line()+
labs(title="Influenza and Mortality")
# It seems the mortality have a positively correlation with influenza.
#1.2###########################################################################
library(mgcv)
mdl12 <- gam(Mortality~
s(Week,k=length(unique(data$Week)))+Year,
method="GCV.Cp", data=data)
mdl12$sp
install.packages("coin")
##3.4##########################################################################
require(MASS)
data_fat <- as.data.frame(data[,-c(1,103,104)])
##3.4##########################################################################
require(MASS)
data_fat <- as.data.frame(data[,-c(1,103,104)])
data <- readxl::read_xlsx("tecator.xlsx")
setwd("D:\\研1\\732A99 Machine Learning\\lab1")
data <- readxl::read_xlsx("tecator.xlsx")
##3.2-3.3######################################################################
# polynomial regression
data <- scale(data);set.seed(123);
require(MASS)
data_fat <- as.data.frame(data[,-c(1,103,104)])
md_AIC <- lm(Fat ~ ., data = data_fat)
mdl_AIC <- stepAIC(md_AIC, direction = 'both',trace = FALSE )
cat("Number of remaining variables:",length(mdl_AIC$coefficients),"\n")
summary(mdl_AIC)
pAIC <- predict(mdl_AIC, data_fat[,1:100])
eAIC <- mean((pAIC-data_fat$Fat)^2 )
##3.5##########################################################################
require(glmnet)
X <- as.matrix(data_fat[,1:100])
Y <- as.matrix(data_fat[,101])
##3.7##########################################################################
cvfit=cv.glmnet(X, Y,family = "gaussian", alpha = 1, type.measure = "mse",
lambda = seq(0,0.01,0.000001))
co <- coef(cvfit,s=cvfit$lambda.1se)
co
